import matplotlib.pyplot as plt
import numpy as np
#Graph of Average Recall for K=1 of different 
xlab = ['Muvera', 'Equiwidth Sequential', 'Equiwidth Parallel', 'Equiwidth Sorted Sequential',
        'Equiwidth Sorted Parallel', 'Equidepth Sequential', 'Equidepth Parallel',
        'Equidepth Sorted Sequential', 'Equidepth Sorted Parallel']
average_prescision = [0.7070707070707071, 0.898989898989899, 0.9191919191919192, 0.898989898989899, 0.9090909090909091,
                      0.8888888888888888, 0.898989898989899, 0.898989898989899, 0.8787878787878788]
plt.figure(figsize = (20, 20))
plt.bar(xlab, average_prescision)
plt.xticks(rotation=45)
plt.ylabel('Prescision', fontsize=20)
plt.yticks(fontsize = 20)
plt.xticks(fontsize = 13)
plt.title('Prescision Differences at K = 1', fontsize = 30)
plt.savefig('average_prescision_at_k-1.png')
plt.close()
#Graph of Average Query Time (Note some code taken from Matplotlib's Group Bar Chart Tutorial)
#https://matplotlib.org/stable/gallery/lines_bars_and_markers/barchart.html
xlab = ['Muvera', 'Equiwidth Sequential', 'Equiwidth Parallel', 'Equiwidth Sorted Sequential',
        'Equiwidth Sorted Parallel', 'Equidepth Sequential', 'Equidepth Parallel',
        'Equidepth Sorted Sequential', 'Equidepth Sorted Parallel']
items = {
'p1' : (0.783, 0.847, 1.791, 0.674, 3.366, 0.815, 1.345, 0.643, 2.053),
'p2' : (0.783, 0.904, 6.049, 0.897, 1.667, 0.803, 1.502, 0.777, 2.897),
'p3' : (0.783, 0.828, 3.409, 0.904, 5.120, 0.865, 3.021, 0.832, 3.401),
'p4' : (0.783, 0.780, 3.207, 0.981, 1.155, 0.724, 1.341, 0.868, 0.934),
'p5' : (0.783, 0.988, 1.308, 0.920, 2.382, 0.721, 2.584, 0.886, 1.085),
}

x = np.arange(len(xlab))
multiplier = 0
width = 0.18
fig, ax = plt.subplots(layout='constrained')
plt.rcParams['font.size'] = 8
fig.set_size_inches(20,13)
for attribute, measurement in items.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

ax.set_ylabel('Time (seconds)', fontsize=20)
ax.set_title('Average Query Retrieval Time for K=10', fontsize = 30)
plt.yticks(fontsize = 20)
ax.set_xticks(x + width, xlab, fontsize = 13, rotation=45)
ax.legend(loc='upper left', fontsize = 20)
ax.set_ylim(0, 7)
plt.savefig('average_query_time_at_k-10.png')
plt.close()
#Graph of Prescision Recall and F1 F05 at k=10
equiwidth_s_p = [1.0,1.0,0.9932659932659932,0.9823232323232324 ,0.9636363636363633,0.9393939393939396,0.8975468975468972,0.8320707070707071,0.7687991021324347,0.7060606060606064 ]
equiwidth_s_r = [0.1568863235529901,0.3137726471059802,0.4605579605579606,0.5980840147506808,0.7223104056437394,0.8324675324675325,0.9140051306717971,0.9565656565656562,0.9850168350168351,1.0 ]
equiwidth_s_f1 = [0.2662804087046509,0.4652965440844226,0.6132248223157314,0.7257218090551418,0.8074012407345738,0.8645934873207592,0.8880926741443672,0.8730972928833884,0.8475014186384853,0.8126017620341661 ]
equiwidth_s_f05 = [0.46717942551275865,0.675162379707834,0.787769731883861,0.8541525520479814,0.8893344416613077,0.9039629215421188,0.8905356068381259,0.8454188683618067,0.7963363723418809,0.743398031927944 ]

equiwidth_sors_p = [1.0,1.0,1.0,0.9949494949494949,0.9898989898989897,0.9730639730639732,0.9365079365079364,0.8787878787878788,0.8125701459034786,0.7444444444444448] 
equiwidth_sors_r = [0.14161856661856648, 0.28323713323713295, 0.42485569985570004, 0.56058201058201, 0.6937830687830691, 0.8106541606541608, 0.899386724386724, 0.9543490460157121, 0.9855218855218855, 1.0 ]
equiwidth_sors_f1 = [0.24630868570262487, 0.4365910184092001, 0.5885955795046707, 0.7076716213079843, 0.8052561916198271,0.8736778373141997, 0.9069292759132327, 0.9046584777868195, 0.880792238377377, 0.8441036469932232 ]
equiwidth_sors_f05 = [0.44567679794952536, 0.6543336095475129, 0.7764756124768788, 0.8516918900006054, 0.9031611354200055, 0.9278259165828582, 0.9221256583553024, 0.8870679023118042, 0.8370018719584561, 0.7800715111147831]

equidepth_sors_p = [1.0, 1.0, 0.9966329966329966, 0.9873737373737373, 0.9717171717171716, 0.9393939393939394, 0.8860028860028858, 0.827020202020202, 0.7609427609427605, 0.6969696969696971 ]
equidepth_sors_r = [0.1567861151194483, 0.3135722302388966, 0.46530784030784067, 0.6077841911175238, 0.7384760301426968, 0.8427368927368931, 0.9130872214205543, 0.9615520282186945, 0.9874298540965208, 1.0 ]
equidepth_sors_f1 = [0.26722564752867767, 0.46760388881601006, 0.620633743361016, 0.7365682017197162, 0.822467095194367, 0.8717874717874707, 0.883068572016878, 0.8734824560136498, 0.8445240803506111, 0.8073024422353623 ]
equidepth_sors_f05 = [0.46974966671936386, 0.6784413266142318, 0.7946415456618099, 0.8628343450512498, 0.9010002588478496, 0.9072125453851083, 0.881690483641281, 0.8424468711412753, 0.7902210997109509, 0.7355588717346627 ]

equidepth_s_p = [1.0, 1.0, 1.0, 0.9924242424242424, 0.9737373737373737, 0.9494949494949492, 0.9018759018759015, 0.8484848484848485, 0.7845117845117843, 0.7202020202020201 ]
equidepth_s_r = [0.14943883277216594, 0.29887766554433187, 0.44831649831649845, 0.5876543209876537, 0.7122494789161455, 0.8221260221260221, 0.8971781305114636, 0.9528699695366356, 0.9837702421035754, 1.0 ]
equidepth_s_f1 = [0.2572361420846267, 0.4528371740492951, 0.607490825672644, 0.7245730700276146, 0.8082222491313394, 0.8666160438887702, 0.8852333248055165, 0.8838680860962499, 0.8597838970645978, 0.8250009746397768 ]
equidepth_s_f05 = [0.4582694241785151, 0.6668747506537164, 0.787757564724212, 0.858932412000853, 0.8954852928366167, 0.9109094946493, 0.8922797287949104, 0.8599817563232192, 0.8110985164637793, 0.7572155562237679 ]

equiwidth_sorp_p = [1.0, 1.0, 1.0, 0.9848484848484849, 0.9676767676767674, 0.9393939393939392, 0.8946608946608945, 0.8522727272727273, 0.7923681257014585, 0.7242424242424242 ]
equiwidth_sorp_r = [0.15200016033349356, 0.3040003206669871, 0.4560004810004813, 0.5886403719737048, 0.7111792528459199, 0.8133477633477639, 0.8883397466730797, 0.9538319704986367, 0.9882996632996635, 1.0 ]
equiwidth_sorp_f1 = [0.26000189485037956, 0.45607299546693475, 0.6104774013864923, 0.7188054930479163, 0.8009927782655043, 0.8532062213880385, 0.8734270334537707, 0.8828464695666116, 0.8630762111412258, 0.8246737018666838 ]
equiwidth_sorp_f05 = [0.45985047500199033, 0.6674124630898247, 0.7877247100086946, 0.8507683268968885, 0.8877718689895931, 0.8985983165625973, 0.8826488263099458, 0.8615191493882117, 0.8170035074750804, 0.7595361782791759]

equiwidth_p_p = [1.0, 1.0, 0.9932659932659934, 0.9823232323232324, 0.9696969696969697, 0.9393939393939391, 0.8946608946608946, 0.8371212121212122, 0.778900112233445, 0.7101010101010101 ]
equiwidth_p_r = [0.15601250601250585, 0.3120250120250117, 0.4579365079365081, 0.594588744588744, 0.7241702741702742, 0.8276575276575278, 0.904914221580888, 0.9550945967612628, 0.9905443322109989, 1.0 ]
equiwidth_p_f1 = [0.26495619980468443, 0.463213666243969, 0.6107004107004108, 0.7229445638536541, 0.8105891863467615, 0.8617024389751654, 0.8820970951541359, 0.8753203603025346, 0.8559994231375216, 0.8154913637369768 ]
equiwidth_p_f05 = [0.46544364726182896, 0.6733033092213125, 0.7860376715569508, 0.8525813228087677, 0.8939800160386829, 0.9026838267217752, 0.8864241202353174, 0.8494457674999595, 0.8059312460429945, 0.7471196173900223]

equidepth_sorp_p = [1.0, 1.0, 0.98989898989899, 0.9823232323232324, 0.9717171717171716, 0.9393939393939392, 0.8932178932178929, 0.8409090909090909, 0.7744107744107739, 0.7060606060606059 ]
equidepth_sorp_r = [0.1565255731922397, 0.3130511463844794, 0.4561087061087064, 0.5974827641494301, 0.7304393137726473, 0.8330928330928331, 0.9082090748757412, 0.9636644219977549, 0.9903198653198654, 1.0 ]
equidepth_sorp_f1 = [0.2659167431894702, 0.4648680163831679, 0.609437532164805, 0.7256887893251524, 0.8157199142047621, 0.864893523984432, 0.8830618117605633, 0.8812480465332512, 0.8532078638960138, 0.8128477989159097 ]
equidepth_sorp_f05 = [0.4669333192060465, 0.6749835297072371, 0.7842693128191294, 0.8541825604095896, 0.8975231420164254, 0.9040553275551951, 0.8859270044626806, 0.8540213915663838, 0.8020321662159502, 0.743532536128964]

equidepth_p_p = [1.0, 1.0, 1.0, 0.9924242424242424, 0.9696969696969695, 0.9326599326599325, 0.89033189033189, 0.8282828282828283, 0.7598204264870927, 0.6999999999999998 ]
equidepth_p_r = [0.15530303030303017, 0.31060606060606033, 0.46590909090909105, 0.6111111111111105, 0.7351731601731601, 0.8327320827320828, 0.9128306878306877, 0.9585618085618081, 0.9824074074074076, 1.0 ]
equidepth_p_f1 = [0.2656456338274518, 0.4655341291704927, 0.6224105860469499, 0.7405996921148432, 0.8195995362662024, 0.8632278495914849, 0.8851484769933964, 0.8729700516688036, 0.8420138312553163, 0.8094874681561979 ]
equidepth_p_f05 = [0.46828606298303266, 0.6770141210872047, 0.7969501838239523, 0.8671438316747235, 0.8983879315630101, 0.8995775380941157, 0.8850540562394698, 0.8430184824065866, 0.7886036065954186, 0.7383215020949818]

m_p = [0.898989898989899, 0.8535353535353535, 0.7845117845117843, 0.7070707070707071, 0.6323232323232323, 0.565656565656566, 0.507936507936508, 0.4595959595959596, 0.41189674523007835, 0.37171717171717167 ]
m_r = [0.3087461920795253, 0.5366843033509698, 0.6854978354978354, 0.774547057880391, 0.8274009940676607, 0.8595478595478597, 0.8799102132435465, 0.8945005611672278, 0.8978675645342312, 0.898989898989899 ]
m_f1 = [0.42671156004489313, 0.611533808503505, 0.6808496217587123, 0.6892415665142929, 0.6690077599168502, 0.6373528828074275, 0.6023408129468732, 0.5687267113292065, 0.5301690123437005, 0.4950182525705556 ]
m_f05 = [0.5942109237563786, 0.7159295777834102, 0.7250752558415096, 0.6896560656932583, 0.6390244328396462, 0.5866345351396085, 0.537508882190981, 0.49433229323119743, 0.44954572821156996, 0.41071840482217487 ]

k = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
plt.plot(k, m_p, color = "black", label = "muvera")
plt.plot(k, equiwidth_s_p, color = "blue", label = "equiwidth (s)")
plt.plot(k, equiwidth_p_p, color = "cyan", linestyle = "dashed", label = "equiwidth (p)")
plt.plot(k, equiwidth_sors_p, color = "red", label = "equiwidth sorted (s)")
plt.plot(k, equiwidth_sorp_p, color = "pink", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.plot(k, equidepth_s_p, color = "green", label = "equidepth (s)")
plt.plot(k, equidepth_p_p, color = "magenta", linestyle = "dashed", label = "equidepth (p)")
plt.plot(k, equidepth_sors_p, color = "yellow", label = "equiwidth sorted (s)")
plt.plot(k, equidepth_sorp_p, color = "orange", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.ylabel('Prescision')
plt.xlabel('@k')
plt.title('Prescision@k for K=10')
plt.legend(loc='lower left')
plt.savefig('average_p@k_at_k-10.png')
plt.close()

plt.plot(k, m_r, color = "black", label = "muvera")
plt.plot(k, equiwidth_s_r, color = "blue", label = "equiwidth (s)")
plt.plot(k, equiwidth_p_r, color = "cyan", linestyle = "dashed", label = "equiwidth (p)")
plt.plot(k, equiwidth_sors_r, color = "red", label = "equiwidth sorted (s)")
plt.plot(k, equiwidth_sorp_r, color = "pink", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.plot(k, equidepth_s_r, color = "green", label = "equidepth (s)")
plt.plot(k, equidepth_p_r, color = "magenta", linestyle = "dashed", label = "equidepth (p)")
plt.plot(k, equidepth_sors_r, color = "yellow", label = "equiwidth sorted (s)")
plt.plot(k, equidepth_sorp_r, color = "orange", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.ylabel('Recall')
plt.xlabel('@k')
plt.title('Recall@k for K=10')
plt.savefig('average_r@k_at_k-10.png')
plt.close()

plt.plot(k, m_f1, color = "black", label = "muvera")
plt.plot(k, equiwidth_s_f1, color = "blue", label = "equiwidth (s)")
plt.plot(k, equiwidth_p_f1, color = "cyan", linestyle = "dashed", label = "equiwidth (p)")
plt.plot(k, equiwidth_sors_f1, color = "red", label = "equiwidth sorted (s)")
plt.plot(k, equiwidth_sorp_f1, color = "pink", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.plot(k, equidepth_s_f1, color = "green", label = "equidepth (s)")
plt.plot(k, equidepth_p_f1, color = "magenta", linestyle = "dashed", label = "equidepth (p)")
plt.plot(k, equidepth_sors_f1, color = "yellow", label = "equiwidth sorted (s)")
plt.plot(k, equidepth_sorp_f1, color = "orange", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.ylabel('F1 Score')
plt.xlabel('@k')
plt.title('F1@k for K=10')
plt.savefig('average_f1@k_at_k-10.png')
plt.close()

plt.plot(k, m_f05, color = "black", label = "muvera")
plt.plot(k, equiwidth_s_f05, color = "blue", label = "equiwidth (s)")
plt.plot(k, equiwidth_p_f05, color = "cyan", linestyle = "dashed", label = "equiwidth (p)")
plt.plot(k, equiwidth_sors_f05, color = "red", label = "equiwidth sorted (s)")
plt.plot(k, equiwidth_sorp_f05, color = "pink", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.plot(k, equidepth_s_f05, color = "green", label = "equidepth (s)")
plt.plot(k, equidepth_p_f05, color = "magenta", linestyle = "dashed", label = "equidepth (p)")
plt.plot(k, equidepth_sors_f05, color = "yellow", label = "equiwidth sorted (s)")
plt.plot(k, equidepth_sorp_f05, color = "orange", linestyle = "dashed", label = "equiwidth sorted (p)")
plt.ylabel('F0.5 Score')
plt.xlabel('@k')
plt.title('F0.5@k for K=10')
plt.savefig('average_f05@k_at_k-10.png')
plt.close()
